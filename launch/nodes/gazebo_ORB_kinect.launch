<launch>

<arg name="path_slam_cofig" default = "/home/yipuzhao/catkin_ws/src/ORB_Data/"/>
<arg name="path_data_logging" default = "/mnt/DATA/tmp/ClosedNav/debug/"/>
<arg name="num_all_feature" default = "1600" />
<arg name="num_good_feature" default = "180" />


<node name="odom_reset" pkg="rostopic" type="rostopic" args="pub /mobile_base/commands/reset_odometry std_msgs/Empty '{}'" />

<param name="/use_sim_time" value="true" />

<!-- downsample the imu message in gazebo; no need in real turtlebot; there might be warning on msf_core: imu message drop: simply ignore that! -->
<node pkg="topic_tools" type="throttle" name="imu_downsample" args=" messages /mobile_base/sensors/imu_data 100 /imu0">
</node>

<!-- downsample the odom message to be logged in rosbag; no need in real turtlebot;  -->
<node pkg="topic_tools" type="throttle" name="odom_downsample" args=" messages /odom 100 /odom_sparse">
</node>


<!-- call baselin ORB-SLAM for vision-based state estimation
<node pkg="gf_orb_slam2" type="RGBD" name="visual_slam" args="$(arg path_slam_cofig)/ORBvoc.bin $(arg path_slam_cofig)/Gazebo_yaml/kinect_rgbd.yaml $(arg num_all_feature) false /camera/rgb/image_raw /camera/depth/image_raw $(arg path_data_logging)">
</node>
 --> 

<!-- call GF-ORB-SLAM for vision-based state estimation  -->
<node pkg="gf_orb_slam2" type="RGBD" name="visual_slam" args="$(arg path_slam_cofig)/ORBvoc.bin $(arg path_slam_cofig)/Gazebo_yaml/kinect_rgbd.yaml $(arg num_good_feature) false /camera/rgb/image_raw /camera/depth/image_raw $(arg path_data_logging)">
</node>




<!-- call msf for visual-inertial state estimation -->
    <node name="msf_pose_sensor" pkg="msf_updates" type="pose_sensor" clear_params="true" output="screen">
           
          <remap from="msf_core/imu_state_input" to="/imu0" />
          <remap from="msf_updates/pose_with_covariance_input" to="/ORB_SLAM/camera_pose_in_imu" />
          <rosparam file="$(find msf_updates)/gazebo_pose_kinect_sensor_fix.yaml"/>
<!-- 
          <remap from="/msf_core/odometry" to="/odom" />
-->
    </node>

<!-- convert msf output to odom message -->
<node name="odom_converter" pkg="odometry_converter" type="odom_converter" output="screen">
  <param name="pose_topic" value="/msf_core/odometry"/>
  <param name="odom_topic" value="visual/odom"/>
  <param name="pose_link" value="base_footprint"/>
  <param name="cam_link" value="camera_rgb_frame"/>
</node> 




<node name="visual_robot_publisher" type="robot_state_publisher" pkg="robot_state_publisher">
  <param name="tf_prefix" value="visual"/>
</node>

<!-- initialize msf -->
<node pkg="rosservice" type="rosservice" name="initialize" args="call --wait /msf_pose_sensor/pose_sensor/initialize_msf_scale 1"/>

</launch>
